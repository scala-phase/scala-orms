#                                                                 -*- ruby -*-
# Generate HTML slides, for S5, from Markdown input.
#
# See README.md for pre-requisites.
# ---------------------------------------------------------------------------

require 'rubygems'
require 'rake/clean'
require 'slidedown'
require 'albino'

SLIDE_SOURCE = 'sq.md'
SLIDE_HTML   = File.basename(SLIDE_SOURCE, ".md") + ".html"
SLIDE_INPUTS = [SLIDE_SOURCE]
SASS_DIR = "sass"
DATA_DIR = "data"
CSS_DIR = "."

SASS_FILES = FileList["#{SASS_DIR}/*.scss"]
CSS_OUTPUT_FILES = SASS_FILES.map do |f|
  f.gsub(/^#{SASS_DIR}/, CSS_DIR).gsub(/\.scss$/, '.css')
end

CLEAN << CSS_OUTPUT_FILES
CLEAN << FileList['*.html']
PWD = File.dirname(__FILE__)

task :default => :slides
task :slides => SLIDE_HTML
task :css => CSS_OUTPUT_FILES
task :run => :slides do
  sh "showoff serve"
end

file SLIDE_HTML => ['Rakefile'] + CSS_OUTPUT_FILES + SLIDE_INPUTS do |t|
end

# ---------------------------------------------------------------------------
# Auto-generate CSS files from any SASS input files.

def find_pygmentize
  loc = nil
  ENV["PATH"].split(":").each do |p|
    p = File.join(p, "pygmentize")
    if File.exist?(p) and File.executable?(p)
      loc = p
      break
    end
  end
  return loc
end

directory CSS_DIR

# Figure out the name of the SCSS file necessary make a CSS file.
def css_to_scss
  Proc.new {|task| task.sub(/^#{CSS_DIR}/, SASS_DIR).
                        sub(/\.css$/, '.scss')}
end

rule %r{^#{CSS_DIR}/.*\.css$} => [css_to_scss, 'Rakefile'] + SASS_FILES do |t|
  require 'sass'
  mkdir_p CSS_DIR
  puts("#{t.source} -> #{t.name}")
  Dir.chdir('sass') do
    sass_input = File.basename(t.source)
    engine = Sass::Engine.new(File.open(sass_input).readlines.join(''),
                              :syntax => :scss)
    out = File.open(File.join('..', t.name), 'w')
    out.write("/* AUTOMATICALLY GENERATED FROM #{t.source} on #{Time.now} */\n")
    out.write(engine.render)
    # Force close, to force flush BEFORE running other tasks.
    out.close
  end
end

